def get_numbers():
    numbers = []
    while True:
        try:
            num = input("Enter a number (or 'done' to finish): ")
            if num.lower() == "done":
                break
            else:
                num = float(num)
                numbers.append(num)
        except ValueError:
            print("Invalid input. Please enter a number or 'done'.")
    return numbers

#This function uses a while loop to repeatedly prompt the user to enter a number, and adds each valid input to a list of numbers. The loop continues until the user enters the string "done", at which point the function returns the list of numbers.

numbers = get_numbers()
print(numbers)

#This code calls the get_numbers() function to prompt the user for input, and stores the resulting list of numbers in the numbers variable. It then prints the list to verify that the input was correctly parsed.

def calculate_mean(numbers):
    try:
        total = sum(numbers)
        mean = total / len(numbers)
        return mean
    except ZeroDivisionError:
        print("Error: cannot calculate mean of an empty list")
    except TypeError:
        print("Error: list contains non-numeric values")




def bubble_sort(numbers):
    n = len(numbers)
    for i in range(n):
        # Perform n-1 comparisons
        for j in range(n - 1):
            # Swap adjacent elements if they are in the wrong order
            if numbers[j] > numbers[j + 1]:
                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]
    return numbers

def calculate_median(numbers):
    sorted_numbers = bubble_sort(numbers)
    n = len(sorted_numbers)
    if n % 2 == 0:
        # If the list has an even number of elements, average the middle two
        middle_left = n // 2 - 1
        middle_right = n // 2
        median = (sorted_numbers[middle_left] + sorted_numbers[middle_right]) / 2
    else:
        # If the list has an odd number of elements, use the middle value
        middle = n // 2
        median = sorted_numbers[middle]
    return median


def calculate_min(numbers):
    if not numbers:
        return None
    minimum = numbers[0]
    for number in numbers:
        if number < minimum:
            minimum = number
    return minimum

def calculate_max(numbers):
    if not numbers:
        return None
    maximum = numbers[0]
    for number in numbers:
        if number > maximum:
            maximum = number
    return maximum

def calculate_standard_error(numbers):
    if not numbers:
        return None
    n = len(numbers)
    mean = calculate_mean(numbers)
    variance = sum([(x - mean) ** 2 for x in numbers]) / n
    standard_deviation = variance ** 0.5
    standard_error = standard_deviation / (n ** 0.5)
    return standard_error
